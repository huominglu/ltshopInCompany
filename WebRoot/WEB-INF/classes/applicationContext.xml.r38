<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jee="http://www.springframework.org/schema/jee"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	
	
	<!-- 1.使用 annotation注解进行 bean的装载  -->
	<context:component-scan base-package="com.oracle" />
	
<!-- 	定义数据源Bean，使用C3P0数据源实现 
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		指定连接数据库的驱动
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		指定连接数据库的URL
		<property name="jdbcUrl" value="jdbc:oracle:thin:@127.0.0.1:1521:ORCL" />
		指定连接数据库的用户名
		<property name="user" value="system" />
		指定连接数据库的密码
		<property name="password" value="oracle" />
		指定连接数据库连接池的最大连接数
		<property name="maxPoolSize" value="40" />
		指定连接数据库连接池的最小连接数
		<property name="minPoolSize" value="1" />
		指定连接数据库连接池的初始化连接数
		<property name="initialPoolSize" value="1" />
		指定连接数据库连接池的连接的最大空闲时间
		<property name="maxIdleTime" value="20" />
	</bean> -->
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:ORCL"/>
		<property name="username" value="scott"/>
		<property name="password" value="oracle"/>
	</bean>


	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 2.使用<property name="packagesToScan" value="com.oracle.model" /> 替代下面的加载映射配置 -->
		<property name="annotatedClasses">
			<list>
				<!--注解使用的是实体类不是使用映射文件  -->
				<value>com.oracle.model.Admin</value>
				<value>com.oracle.model.Role</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<!--此处用来定义hibernate的SessionFactory的属性：不同数据库连接，启动时选择create,update,create-drop-->
				<prop key="hibernate.dialect">
					org.hibernate.dialect.OracleDialect
				</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<!-- 1.什么是缓存:缓存是数据库数据临时容器，它包含了库表数据的临时拷贝，位于数据库与数据访问层之间。ORM进行数据读取时，会根据其缓存管理策略，
					  首先在内存中查询，如果在内存中发现所需数据（缓存命中），则直接以此数据错位查询结果加以利用，从而避免了数据库调用的性能开销。
  					  缓存的介质一般是内存，所以读写速度很快。但如果缓存中存放的数据量非常大时，也会用硬盘作为缓存介质。缓存的实现不仅仅要考虑存储的介质，
  					  还要考虑到管理缓存的并发访问和缓存数据的生命周期.
					 2.hibernate中的两个级别的缓存:Hibernate中提供了两级Cache，第一级别的缓存是Session级别的缓存， 它是属于事务范围的缓存。
					 这一级别的缓存由hibernate管理的，一般情况下无需进行干预；第二级别的缓存是SessionFactory级别的缓存，它是属于进程范围的缓存。
					 这一级别的缓存可以进行配置和更改，并且可以动态加载和卸载,Hibernate还为查询结果提供了一个查询缓存，它依赖于第二级缓存 .
				 -->
				 <!-- 开启二级缓存   对应的jar包是hibernate-ehcache-4.3.1.Final.jar,ehcache-core-2.4.3.jar-->
				<prop key="hibernate.cache.region.factory_class" >org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="hibernate.cache.use_second_level_cache" >true</prop>
				<!-- 开启查询缓存 -->
				<prop key="hibernate.cache.use_query_cache" >true</prop>
				<!-- 缓存的配置文件-->
				<prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache.xml</prop>
			</props>
		</property>
	</bean>

	<!--配置事务管理器,将我们的sessionFactory注入-->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 3.用来启用基于注解的事务 -->
   <tx:annotation-driven transaction-manager="txManager"/>

</beans>